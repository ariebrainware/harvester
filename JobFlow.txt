URLQueueItem {
	origin:      string
	refer:       string
	descendants: []string
	level:       int
}

Web Server Receives Job request
+|-> Creates Job in DB, with Job's URLs
+|-> Validates URLs look valid
+|-> calls queue.Send({origin:url[i], level:0}) for each url
|
v
QueueService receives URL queue add
+|-> Pull URLQueueItem off queue
+|-> If URL is crawled already
	+|-> remove from pending list
	+|-> get next queue item
+|-> Else if not known
	+|-> Add URL to known

			|-> If URL is known and is also a refer in known table
				|-> find Jobs with origin not completed, and mark as completed. (STOP)
			|-> Else if URL is known but not a refer, and url.has_descendants != null
				|-> continue
			|-> Else if URL is not known add to known with no refer.

|-> publish URLQueueItem to worker queue
|
v
Worker Pulls URLQueueItem from queue
+|-> Request Content for URL
+|-> if mime is not text/html update know table entry for refer+URL
+|-> scrape HTML page for URLS
+|-> for each found URL
	+|-> if URL looks like image insert into know with refer as this page, and remove from URL list
+|-> create URLQueueItem for each descendant with this URL as a refer and original URLQueueItem's origin, increment level

+|-> If URL has descendants add descendants to know table with refer of this URL.
+|-> Update this URL as crawled
+|-> if URLQueueItem has descendants and level <= x
	+|-> insert descendants into pending table for origin
+|-> Remove origin+URL from pending table
|-> Check if origin has anymore entries in pending table
	|-> find Jobs with origin not completed, and mark as completed


TODO:
|-> Add checking if URL already is known, and don't scan it
|-> add checking to mark jobs as completed
|-> Write documentation
|-> Cleanup/add docuementation
|-> Upload to github
|-> publish dock on a online doc page
|-> Setup server running on jasdel w/ 2 instances of each layer.
